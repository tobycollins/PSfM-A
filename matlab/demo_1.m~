function demo_1()

%define scene simulation parameters:
sceneOpts.M = 10; %number of views
sceneOpts.N = 7; %number of points
sceneOpts.sigma = 0; % IID gaussian noise added to image points
sceneOpts.maxTilt = 80; % maximum tilt angle of structure in each view (degrees)
sceneOpts.colinearThresh = 0.05; % prevents structure that are very colinear. Implemented with e2/e1 > colinearThresh where (e1, e2) are the PCA eigenvalues of the structure points

%generate the scene as a set of camera poses (Rgt, Tgt), a structure matrix
%(Sgt) and a set of observed points in each image (qs):
[Rgt,Tgt,Sgt,qs] = generateRandomScene(sceneOpts);

%perform 2D affine factorization ofpoint observatioin matrix:
[Qmat,AFactor,SFactor,As] = affineFactorize2D(qs);

%find orthographic camera least-squares upgrade solutions:
[Xs] = oUpgradeLS(As);

%make sure the upgrade solutions are unique to within machine precision
Xs = uniqueUpgrades(Xs);

%now evaluate accuracy of upgrade:
%Find the upgraded structure matrix that best aligns with Sgt
[Shat,structErr] = getBestStructureWithGT(Xs,SFactor,Sgt);

%align upgraded structure matreix with Sgt:
[~,ShatAligned,~]=absor(Shat(1:2,:),Sgt(1:2,:),'doScale',false);
ShatAligned(3,:) = 0;

%find the camera poses
[Rhat,that] = resectCamerasPMAR(ShatAligned,qs);

%evaluate camera pose errors
[RNorms,tNorms] = sceneErrorL2(ShatAligned,Rhat,that,Sgt,Rgt,Tgt);

%if all is good, these assertions shou
assert(structErr < 1e-6);
assert(norm(RNorms) < 1e-6);
assert(norm(tNorms) < 1e-6);









